# This Script applies Jaccard Similarity Algorithm to evaluate 
# the data quality by comparing how similar the crowsourced 
# data (point mode) are to the benchmark data

import sys
sys.dont_write_bytecode = True
import  Data_pb2
import os,glob
import pandas as pd
import numpy as np
import argparse


def get_AP_name(file_path):
	fin = open(file_path,'rb')
	frame = pd.DataFrame(columns=['scanNum','Wifi Name','AP Name','Level'])
	datapack = Data_pb2.DataPack()
	datapack.ParseFromString(fin.read())
	fin.close()
	rss = datapack.rssItems

	for i in rss:
		frame = frame.append({'scanNum':i.scanNum,'Wifi Name':i.ssid,'AP Name':i.bssid,\
		 'Level': i.level}, ignore_index=True)

	macsecure = []
	for k in ['Mac-WiFi','MacSecure','eduroam']:
		for i in range(len(frame['Wifi Name'])):
			if frame['Wifi Name'][i] == k:
				macsecure.append(frame['AP Name'][i])

	return set(macsecure)


def get_level(file_path, wifi_name):
	fin = open(file_path,'rb')
	frame = pd.DataFrame(columns=['scanNum','Wifi Name','AP Name','Level'])
	datapack = Data_pb2.DataPack()
	datapack.ParseFromString(fin.read())
	fin.close()
	rss = datapack.rssItems

	for i in rss:
		frame = frame.append({'scanNum':i.scanNum,'Wifi Name':i.ssid,'AP Name':i.bssid,\
		 'Level': i.level}, ignore_index=True)
	
	level = []
	for i in range(len(frame['Wifi Name'])):
		if frame['Wifi Name'][i] == wifi_name:
			level.append(frame['Level'][i])

	return level


def ap_similarity(fileA,fileB):
	A = set(fileA)
	for i in fileB:
		A.add(i)
	result = (len(fileA) + len(fileB) - len(A))/float(len(fileB)+len(fileA))
	return result


def main():
	base_dir = "/Users/lawrence/Desktop/Temp/"
	guided = []
	unguided = []
	# Read the matching results from the csv file generated by pre_compare.py 
	pair = open("./pair.csv",'r')
	lines = pair.readlines()
	for i in lines:
		fileA = i.split(',')[0]
		fileB = i.split(',')[1]
		# mode indicates if the participant is guided or unguided
		mode = int(i.split(',')[2])
		if mode == 1:
			a = get_AP_name(base_dir+"cali_data/"+fileA.strip())
			b = get_AP_name(base_dir+"data_point/"+fileB.strip())
			sim = ap_similarity(a,b)
			guided.append(sim)
		else:
			a = get_AP_name(base_dir+"cali_data/"+fileA.strip())
			b = get_AP_name(base_dir+"data_point/"+fileB.strip())
			sim = ap_similarity(a,b)
			unguided.append(sim)
	#Results
	print("guided_point full: "+ str(sum(guided)/len(guided)))
	print("guided_point full: "+ str(sum(unguided)/len(unguided)))

	guided = []
	unguided = []
	# Read the matching results from the csv file generated by pre_compare.py 
	pair = open("./pair_same_size.csv",'r')
	lines = pair.readlines()
	for i in lines:
		fileA = i.split(',')[0]
		fileB = i.split(',')[1]
		# mode indicates if the participant is guided or unguided
		mode = int(i.split(',')[2])
		if mode == 1:
			a = get_AP_name(base_dir+"cali_data/"+fileA.strip())
			b = get_AP_name(base_dir+"data_point/"+fileB.strip())
			sim = ap_similarity(a,b)
			guided.append(sim)
		else:
			a = get_AP_name(base_dir+"cali_data/"+fileA.strip())
			b = get_AP_name(base_dir+"data_point/"+fileB.strip())
			sim = ap_similarity(a,b)
			unguided.append(sim)
	#Results
	print("guided_point same: "+ str(sum(guided)/len(guided)))
	print("guided_point same: "+ str(sum(unguided)/len(unguided)))

if __name__ == "__main__":
	main()





